apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: default
  name: {{ project }}
  labels:
    app: {{ project }}
spec:
  selector:
    matchLabels:
      app: {{ project }}
  strategy:                             # 更新策略：滚动部署
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1                       # 允许同时更新的最大 Pod 数量
      maxUnavailable: 0                 # 允许的最大 Pod 不可用数量
  replicas: 2                           # 配置容器副本数量
  minReadySeconds: 30                   # 最小准备时间
  template:
    metadata:
      labels:
        app: {{ project }}
    spec:
      terminationGracePeriodSeconds: 30 # 优雅停机最长时间 单位：秒
      containers:
      - image: registry-vpc.cn-beijing.aliyuncs.com/micro-java/{{ project }}:latest
        imagePullPolicy: Always
        name: {{ project }}
        ports:
        - containerPort: 8080           # HTTP 端口
{% if rpcPort is defined %}
        - containerPort: {{ rpcPort }}  # RPC 端口
{% endif %}
        env:
          - name: JVM_PARAMS
            value: {{ jvm_params }}     # Spring Boot JVM 参数配置
        readinessProbe:                 # ---- 准备状态检查 ----
          httpGet:
            path: /actuator/health
            port: 8080
          timeoutSeconds: 2             # 探测超时时长，单位：秒
          initialDelaySeconds: 60       # 初始化时间，单位：秒
        livenessProbe:                  # ---- 健康状态检查 ----
          httpGet:
            port: 8080
            path: /actuator/info
          failureThreshold: 3           # 最大失败次数
          timeoutSeconds: 2             # 探测超时时长，单位：秒
          initialDelaySeconds: 60       # 初始化时间，单位：秒
          periodSeconds: 5              # 探测时间间隔，单位：秒
          successThreshold: 1           # 失败后探测成功的最小连续成功次数
        resources:
          limits:                       # 资源限制
#            cpu: "500m"                # 测试时建议不添加此限制
            memory: "1024Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: {{ project }}
  labels:
    app: {{ project }}
spec:
  ports:
  - port: 8080
    targetPort: 8080
{% if nodePort is defined %}           # 指定对外暴露的端口号 NodePort
    nodePort: {{ nodePort }}
{% endif %}
{% if rpcPort is defined %}
  - name: rpc
    port: {{ rpcPort }}
    targetPort: {{ rpcPort }}
{% endif %}
  selector:
    app: {{ project }}
{% if nodePort is defined %}
  type: NodePort
{% endif %}